# MAIN TABLE DATA CLEANING

RENAME TABLE PROJECTS TO CROWDFUNDING;

SELECT * FROM crowdfunding;
SHOW COLUMNS IN CROWDFUNDING;


# ADDING DATE COLUMNS
ALTER TABLE CROWDFUNDING 
ADD COLUMN CREATED_AT_DATE DATE, 
ADD COLUMN DEADLINE_DATE DATE, 
ADD COLUMN UPDATED_AT_DATE DATE, 
ADD COLUMN STATE_CHANGED_AT_DATE DATE, 
ADD COLUMN SUCCESSFULL_AT_DATE DATE, 
ADD COLUMN LAUNCHED_AT_DATE DATE;


#EPOCH CONVERTOR
UPDATE crowdfunding SET CREATED_aT_dATE=from_unixtime(CREATED_AT);

UPDATE crowdfunding SET LAUNCHED_AT_DATE=from_unixtime(LAUNCHED_AT);

UPDATE CROWDFUNDING SET SUCCESSFUL_AT=NULL 
WHERE SUCCESSFUL_AT='' OR SUCCESSFUL_AT =' ' ; # TO DEAL WITH NULLS
ALTER TABLE CROWDFUNDING MODIFY COLUMN SUCCESSFUL_AT INT;

UPDATE crowdfunding SET SUCCESSFULL_AT_DATE=from_unixtime(SUCCESSFUL_AT);

UPDATE crowdfunding SET DEADLINE_DATE=from_unixtime(DEADLINE);

UPDATE crowdfunding SET UPDATED_AT_DATE=from_unixtime(UPDATED_AT);

UPDATE crowdfunding SET STATE_CHANGED_AT_DATE=from_unixtime(STATE_CHANGED_AT);

#REMOVING UNNESECARY COLUMNS

ALTER TABLE CROWDFUNDING DROP COLUMN CREATED_AT,
DROP COLUMN DEADLINE,DROP COLUMN UPDATED_AT,
DROP COLUMN STATE_CHANGED_AT,
DROP COLUMN SUCCESSFUL_AT,
DROP COLUMN LAUNCHED_AT;


# ADDING COUNTRY NAME
ALTER TABLE CROWDFUNDING ADD COLUMN COUNTRY_NAME VARCHAR(200);

SELECT CF.COUNTRY,CC.country 
FROM CROWDFUNDING AS CF 
JOIN country AS CC 
ON CF.COUNTRY=CC.CODE;

UPDATE CROWDFUNDING AS CF 
JOIN country AS CC 
ON CF.COUNTRY=CC.CODE 
SET CF.COUNTRY_NAME=CC.countrY;

#SINCE DATA SIZE HUGE USED INDEX
ALTER TABLE CROWDFUNDING ADD INDEX idx_country (COUNTRY(100));
ALTER TABLE country ADD INDEX idx_code (CODE);

ALTER TABLE CROWDFUNDING DROP COLUMN country; # REMOVING REDUNDENT COLUMNS

# REMOVING COLUMNS NOT NEEDED

ALTER TABLE CROWDFUNDING DROP COLUMN blurb, DROP COLUMN currency_trailing_code;

# STANDARDIZING SATFF_PICK,SPOTLIGHT, AND DISABLE_COMMUNICATION

UPDATE crowdfunding 
SET STAFF_PICK=CASE 
	WHEN STAFF_PICK='TRUE' THEN 1 
    WHEN STAFF_PICK='FALSE' THEN 0
    ELSE STAFF_PICK END;
ALTER TABLE CROWDFUNDING MODIFY COLUMN STAFF_PICK INT; # CHANGED DATA TYPE

UPDATE crowdfunding 
SET SPOTLIGHT=CASE 
	WHEN SPOTLIGHT='TRUE' THEN 1 
    WHEN SPOTLIGHT='FALSE' THEN 0 
    ELSE SPOTLIGHT END;
ALTER TABLE CROWDFUNDING MODIFY COLUMN SPOTLIGHT INT;

UPDATE crowdfunding 
SET DISABLE_COMMUNICATION=CASE 
	WHEN DISABLE_COMMUNICATION='TRUE' THEN 1 
    WHEN DISABLE_COMMUNICATION='FALSE' THEN 0 
    ELSE DISABLE_COMMUNICATION END;
ALTER TABLE CROWDFUNDING MODIFY COLUMN DISABLE_COMMUNICATION INT;

#ADJUSTED USD BASED ON STATIC RATE
ALTER TABLE CROWDFUNDING ADD COLUMN USD_ADJUSTED BIGINT;

UPDATE CROWDFUNDING SET USD_ADJUSTED=USD_PLEDGED*STATIC_USD_RATE;

ALTER TABLE CROWDFUNDING 
DROP COLUMN CURRENCY,
DROP COLUMN CURRENCY_SYMBOL,
DROP COLUMN STATIC_USD_RATE;

#MINOR ADJUSTMENTS
ALTER TABLE CROWDFUNDING MODIFY COLUMN STATE VARCHAR(50);
ALTER TABLE CROWDFUNDING 
DROP COLUMN UPDATED_AT_DATE,
DROP COLUMN STATE_CHANGED_AT_DATE;
ALTER TABLE crowdfunding CHANGE COLUMN NAME PROJECT_NAME TEXT;


#######################################


# CATEGORY TABLE


CREATE TABLE CATEGORY (CATEGORY_ID VARCHAR(255),
						NAME VARCHAR(255),
                        PARENT_ID VARCHAR(255),
                        POSITION VARCHAR(255));

LOAD DATA INFILE "C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/crowdfunding_Category.csv"
INTO TABLE CATEGORY
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\r\n'
IGNORE 1 ROWS;

SELECT * FROM category;

UPDATE category SET CATEGORY_ID=NULL WHERE CATEGORY_ID='';
UPDATE category SET PARENT_ID=NULL WHERE PARENT_ID='';
UPDATE category SET POSITION=NULL WHERE POSITION='';

ALTER TABLE CATEGORY 
MODIFY COLUMN CATEGORY_ID INT, 
MODIFY COLUMN PARENT_ID INT,
MODIFY COLUMN POSITION INT;

ALTER TABLE CATEGORY CHANGE COLUMN NAME CATEGORY VARCHAR(255);


#############################################


# LOCATION TABLE 

CREATE TABLE LOCATION (LOCATION_ID VARCHAR(255),
						DISPLAYABLE_NAME VARCHAR(255),
                        TYPE VARCHAR(255),
                        NAME VARCHAR(255),
                        STATE VARCHAR(255),
                        SHORT_NAME VARCHAR(255),
                        IS_ROOT VARCHAR(255),
                        COUNTRY VARCHAR(255),
                        LOCALISED_NAME VARCHAR(255));
                        
LOAD DATA INFILE "C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/Crowdfunding_Location.csv"
INTO TABLE LOCATION
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\r\n'
IGNORE 1 ROWS;

SELECT * FROM LOCATION;

UPDATE LOCATION SET LOCATION_ID=NULL WHERE LOCATION_ID='';
UPDATE LOCATION SET DISPLAYABLE_NAME=NULL WHERE DISPLAYABLE_NAME='';
UPDATE LOCATION SET TYPE=NULL WHERE TYPE='';
UPDATE LOCATION SET NAME=NULL WHERE NAME='';
UPDATE LOCATION SET STATE=NULL WHERE STATE='';
UPDATE LOCATION SET SHORT_NAME=NULL WHERE SHORT_NAME='';
UPDATE LOCATION SET IS_ROOT=NULL WHERE IS_ROOT='';
UPDATE LOCATION SET COUNTRY=NULL WHERE COUNTRY='';
UPDATE LOCATION SET LOCALISED_NAME=NULL WHERE LOCALISED_NAME='';

ALTER TABLE LOCATION MODIFY COLUMN LOCATION_ID INT;

ALTER TABLE LOCATION 
DROP COLUMN NAME,
DROP COLUMN STATE,
DROP COLUMN SHORT_NAME, 
DROP COLUMN IS_ROOT,
DROP COLUMN LOCALISED_NAME;

# SEPERATING CITY NAME AND STATE NAME FROM DISPLAYABLE_NAME
SELECT DISPLAYABLE_NAME FROM LOCATION WHERE DISPLAYABLE_NAME NOT LIKE "%,%";

SELECT DISTINCT CASE WHEN LOCATE(',',DISPLAYABLE_NAME)>0 
	THEN SUBSTRING(DISPLAYABLE_NAME,1,LOCATE(',',DISPLAYABLE_NAME)-1) 
    ELSE DISPLAYABLE_NAME END FROM LOCATION;
    
ALTER TABLE LOCATION ADD COLUMN CITY VARCHAR(200);

UPDATE LOCATION 
SET CITY=CASE 
	WHEN LOCATE(',',DISPLAYABLE_NAME)>0 
    THEN SUBSTRING(DISPLAYABLE_NAME,1,LOCATE(',',DISPLAYABLE_NAME)-1) 
    ELSE DISPLAYABLE_NAME END;
    
SELECT DISTINCT substring(DISPLAYABLE_NAME,LOCATE(',',DISPLAYABLE_NAME)+2,2) 
FROM LOCATION;

SELECT DISTINCT substring(DISPLAYABLE_NAME,LOCATE(',',DISPLAYABLE_NAME)+2,2) 
FROM LOCATION
WHERE BINARY substring(DISPLAYABLE_NAME,LOCATE(',',DISPLAYABLE_NAME)+2,2)
	=UPPER(substring(DISPLAYABLE_NAME,LOCATE(',',DISPLAYABLE_NAME)+2,2));
    # TO FILTER COUNTRY CODE OUT OF STATE CODE
    
ALTER TABLE LOCATION ADD COLUMN STATE VARCHAR(10);

UPDATE LOCATION 
SET STATE=substring(DISPLAYABLE_NAME,LOCATE(',',DISPLAYABLE_NAME)+2,2) 	
WHERE BINARY substring(DISPLAYABLE_NAME,LOCATE(',',DISPLAYABLE_NAME)+2,2)
	=UPPER(substring(DISPLAYABLE_NAME,LOCATE(',',DISPLAYABLE_NAME)+2,2));
ALTER TABLE LOCATION DROP COLUMN DISPLAYABLE_NAME;

ALTER TABLE LOCATION ADD COLUMN COUNTRY_NAME VARCHAR(200);
UPDATE LOCATION AS L JOIN COUNTRY AS C ON L.COUNTRY=C.CODE SET L.COUNTRY_NAME=C.COUNTRY;

ALTER TABLE LOCATION DROP COLUMN COUNTRY;


#################################


# COUNTRY CODE TABLE TO GET FULL NAME OF COUNTRIES

CREATE TABLE COUNTRY (CODE VARCHAR(255),COUNTRY VARCHAR(255));

LOAD DATA INFILE "C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/COUNTRY CODES.csv"
INTO TABLE COUNTRY
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\r\n'
IGNORE 1 ROWS ;

SELECT * FROM COUNTRY ORDER BY CODE ASC;

DROP TABLE COUNTRY;


##################################################


# CREATOR TABLE 

CREATE TABLE creator (CREATOR_ID TEXT,NAME TEXT,CHOSEN_CURRENCY TEXT );

SELECT * FROM CREATOR;

LOAD DATA INFILE "C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/crowdfunding_Creator.csv"
INTO TABLE CREATOR
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\r\n'
IGNORE 1 ROWS ;

UPDATE CREATOR SET CHOSEN_CURRENCY=NULL WHERE CHOSEN_CURRENCY='.';

# SEGREGATING DELETED CREATORS
ALTER TABLE CREATOR 
ADD COLUMN NAMES VARCHAR(255),
ADD COLUMN DELETED VARCHAR(100);

SELECT * FROM CREATOR WHERE NAME NOT LIKE "%DELETED%";

SELECT substring(NAME,1,LOCATE('(DELETED)',NAME)-1) 
FROM CREATOR WHERE NAME LIKE "%DELETED%";

UPDATE CREATOR SET NAMES=NAME WHERE NAME NOT LIKE '%DELETED%';

UPDATE CREATOR 
SET DELETED=substring(NAME,1,LOCATE('(DELETED)',NAME)-1) 
WHERE NAME LIKE "%DELETED%";

ALTER TABLE CREATOR DROP COLUMN NAME;

# FINAL TABLE
SELECT CF.PROJECTID,
		CF.PROJECT_NAME,
        CF.STATE,
        CR.NAMES,
        CR.DELETED,
        L.TYPE,
        L.CITY,
        CF.COUNTRY_NAME,
        CT.CATEGORY,
        CF.GOAL,
        CF.USD_PLEDGED,
        CF.USD_ADJUSTED,
        CF.BACKERS_COUNT,
        CF.SPOTLIGHT,
        CF.STAFF_PICK,
        CF.CREATED_AT_DATE,
        CF.DEADLINE_DATE,
        CF.SUCCESSFULL_AT_DATE,
        CF.LAUNCHED_AT_DATE 
FROM CROWDFUNDING AS CF 
JOIN CATEGORY AS CT 
	ON CF.CATEGORY_ID=CT.CATEGORY_ID 
JOIN CREATOR AS CR 
	ON CR.CREATOR_ID=CF.CREATOR_ID
JOIN LOCATION AS L 
	ON CF.LOCATION_ID=L.LOCATION_ID;


CREATE TABLE crowd_FUNDING AS
SELECT cf.ProjectID AS PROJECTID,
    cf.PROJECT_NAME AS PROJECT_NAME,
    cf.STATE AS STATE,
    cr.NAMES AS NAMES,
    cr.DELETED AS DELETED,
    l.TYPE AS TYPE,
    l.CITY AS CITY,
    cf.COUNTRY_NAME AS COUNTRY_NAME,
    ct.CATEGORY AS CATEGORY,
    cf.goal AS GOAL,
    cf.usd_pledged AS USD_PLEDGED,
    cf.USD_ADJUSTED AS USD_ADJUSTED,
    cf.backers_count AS BACKERS_COUNT,
    cf.SPOTLIGHT AS SPOTLIGHT,
    cf.STAFF_PICK AS STAFF_PICK,
    cf.CREATED_AT_DATE AS CREATED_AT_DATE,
    cf.DEADLINE_DATE AS DEADLINE_DATE,
    cf.SUCCESSFULL_AT_DATE AS SUCCESSFULL_AT_DATE,
    cf.LAUNCHED_AT_DATE AS LAUNCHED_AT_DATE
FROM crowdfunding AS cf
JOIN category AS ct 
	ON cf.category_id = ct.CATEGORY_ID
JOIN creator AS cr 
	ON cr.CREATOR_ID = cf.creator_id
JOIN location AS l 
	ON cf.location_id = l.LOCATION_ID;

########################################################
########################################################

#MAKING CALENDAR TABLE 

# CALCULATING MINIMUM AND MAXIMUM DATE
SELECT MIN(CREATED_AT_DATE) FROM crowd_FUNDING
UNION    
SELECT MIN(DEADLINE_DATE) FROM crowd_FUNDING
UNION
SELECT MIN(SUCCESSFULL_AT_DATE) FROM crowd_FUNDING
UNION
SELECT MIN(LAUNCHED_AT_DATE) FROM crowd_FUNDING
UNION
SELECT MAX(CREATED_AT_DATE) FROM crowd_FUNDING
UNION    
SELECT max(DEADLINE_DATE) FROM crowd_FUNDING
UNION
SELECT max(SUCCESSFULL_AT_DATE) FROM crowd_FUNDING
UNION
SELECT MAX(LAUNCHED_AT_DATE) FROM crowd_FUNDING;

SELECT LEAST((SELECT MIN(CREATED_AT_DATE) FROM crowd_FUNDING),
        (SELECT MIN(DEADLINE_DATE) FROM crowd_FUNDING),
        (SELECT MIN(SUCCESSFULL_AT_DATE) FROM crowd_FUNDING),
        (SELECT MIN(LAUNCHED_AT_DATE) FROM crowd_FUNDING)) AS MIN_MAX
UNION ALL
SELECT GREATEST((SELECT MAX(CREATED_AT_DATE) FROM crowd_FUNDING),
        (SELECT MAX(DEADLINE_DATE) FROM crowd_FUNDING),
        (SELECT MAX(SUCCESSFULL_AT_DATE) FROM crowd_FUNDING),
        (SELECT MAX(LAUNCHED_AT_DATE) FROM crowd_FUNDING));

CREATE TABLE CalendarDates (calendar_date DATE);

SET SESSION cte_max_recursion_depth = 36500;# TO REMOVE SQL LIMITS

SELECT * FROM CALENDARDATES;

INSERT INTO CalendarDates 
WITH RECURSIVE DateSeries AS (
    SELECT LEAST((SELECT MIN(CREATED_AT_DATE) FROM crowd_FUNDING),
        (SELECT MIN(DEADLINE_DATE) FROM crowd_FUNDING),
        (SELECT MIN(SUCCESSFULL_AT_DATE) FROM crowd_FUNDING),
        (SELECT MIN(LAUNCHED_AT_DATE) FROM crowd_FUNDING)) AS dt 
    UNION ALL
    SELECT DATE_ADD(dt, INTERVAL 1 DAY)
    FROM DateSeries
    WHERE dt < GREATEST((SELECT MAX(CREATED_AT_DATE) FROM crowd_FUNDING),
        (SELECT MAX(DEADLINE_DATE) FROM crowd_FUNDING),
        (SELECT MAX(SUCCESSFULL_AT_DATE) FROM crowd_FUNDING),
        (SELECT MAX(LAUNCHED_AT_DATE) FROM crowd_FUNDING)))
SELECT dt
FROM DateSeries;

SELECT * FROM calendardates;

ALTER TABLE calendardates ADD COLUMN YEAR INT,
						ADD COLUMN MONTH INT,
                        ADD COLUMN MONTH_NAME VARCHAR(25),
                        ADD COLUMN QUARTER INT,
                        ADD COLUMN YEAR_MONTHS varchar(50),
                        ADD COLUMN WEEKDAY INT,
                        ADD COLUMN DAY_NAME varchar(20),
                        ADD COLUMN FINANCIAL_MONTH VARCHAR(25),
                        ADD COLUMN FINANCIAL_QUARTER VARCHAR(20);

UPDATE calendardates SET YEAR=YEAR(calendar_DATE);

UPDATE calendardates SET MONTH=MONTH(calendar_DATE);

UPDATE calendardates SET MONTH_NAME=MONTHNAME(calendar_DATE);

UPDATE calendardates SET QUARTER=QUARTER(calendar_DATE);

UPDATE calendardates SET YEAR_MONTHS=DATE_FORMAT(calendar_DATE,'%Y-%M');

UPDATE calendardates SET WEEKDAY=dayofweek(calendar_DATE);

UPDATE calendardates SET DAY_NAME=dayname(calendar_DATE);

UPDATE calendardates SET FINANCIAL_MONTH=
	CONCAT('FM ',CASE 
			WHEN MONTH(calendar_DATE)<4 THEN MONTH(calendar_DATE)+9 
            ELSE MONTH(calendar_DATE)-3 END);

UPDATE calendardates SET FINANCIAL_QUARTER=
	CONCAT('FQ ',CASE 
			WHEN QUARTER(calendar_DATE)=1 THEN 4 
            ELSE QUARTER(calendar_DATE)-1 END);

###########################################################
###########################################################

# NUMBER OF PROJECTS BASED ON STATUS

SELECT UPPER(STATE) AS STATUS,
	FORMAT(COUNT(PROJECTID),0) AS NUMBER_OF_PROJECTS 
FROM crowd_funding GROUP BY STATE 
ORDER BY CASE STATE 
	WHEN 'SUCCESSFUL' THEN 1 
    WHEN 'LIVE' THEN 2 
    WHEN 'CANCELED' THEN 3 
    WHEN 'FAILED'THEN 4 
    WHEN 'SUSPENDED' THEN 5 
    WHEN 'PURGED' THEN 6 END;

# NUMBER OF PROJECTS BASED ON LOCATION

SELECT UPPER(COUNTRY_NAME) AS LOCATION,
	FORMAT(COUNT(PROJECTID),0) AS NUMBER_OF_PROJECTS 
FROM CROWD_FUNDING 
GROUP BY COUNTRY_NAME 
ORDER BY COUNT(PROJECTID) DESC 
LIMIT 10;

# NUMBER OF PROJECTS BASED ON CATEGORY

SELECT UPPER(CATEGORY) AS CATEGORY,
	FORMAT(COUNT(PROJECTID),0) AS NUMBER_OF_PROJECTS 
FROM CROWD_FUNDING 
GROUP BY CATEGORY 
ORDER BY COUNT(PROJECTID) DESC 
LIMIT 10;

# NUMBER OF PROJECTS BASED ON YEAR_MONTH

SELECT CD.YEAR_MONTHS,
	FORMAT(COUNT(CF.PROJECTID),0) AS NUMBER_OF_PROJECTS 
FROM crowd_funding AS CF 
JOIN calendardates AS CD 
	ON CF.LAUNCHED_AT_DATE=CD.calendar_date 
GROUP BY CD.YEAR_MONTHS,CD.YEAR,CD.MONTH 
ORDER BY YEAR ASC,MONTH ASC;

# NUMBER OF PROJECTS BASED ON YEAR 

SELECT CD.YEAR,
	FORMAT(COUNT(CF.PROJECTID),0) AS NUMBER_OF_PROJECTS 
FROM crowd_funding AS CF 
JOIN calendardates AS CD 
	ON CF.LAUNCHED_AT_DATE=CD.calendar_date
GROUP BY CD.YEAR 
ORDER BY CD.YEAR ASC;

#SUCCESSFULL PROJECT OVERVIEW

SELECT FORMAT(COUNT(*),0) AS NUMBER_OF_SUCCESSFULL_PROJECTS,
CONCAT(FORMAT(ROUND((SUM(USD_PLEDGED)/1000000),2),2),' MN') AS AMOUNT_PLEDGED ,
CONCAT(FORMAT(ROUND((SUM(BACKERS_COUNT)/1000000),2),2),' MN') AS NUMBER_OF_BACKERS,
ROUND(AVG(DATEDIFF(SUCCESSFULL_AT_DATE,LAUNCHED_AT_DATE)),2) AS AVERAGE_NUMBER_OF_DAYS 
FROM crowd_funding 
WHERE STATE='SUCCESSFUL';

SELECT 'NUMBER OF SUCCESSFULL PROJECTS' AS METRIC,
		FORMAT(COUNT(*),0) AS `VALUES` 
        FROM CROWD_FUNDING
UNION
SELECT 'AMOUNT PLEDGED',
		CONCAT('$ ',FORMAT(ROUND((SUM(USD_PLEDGED)/1000000),2),2),' MN') 
        FROM CROWD_FUNDING
UNION
SELECT 'NUMBER OF BACKERS',
		CONCAT('$ ',FORMAT(ROUND((SUM(BACKERS_COUNT)/1000000),2),2),' MN') 
        FROM CROWD_FUNDING
UNION
SELECT 'AVERAGE NUMBER OF DAYS',
		CONCAT(ROUND(AVG(DATEDIFF(SUCCESSFULL_AT_DATE,LAUNCHED_AT_DATE)),2),' DAYS') 
        FROM CROWD_FUNDING;

# MOST SUCCESSFULL PROJECTS BY AMOUNT PLEDGED

SELECT DISTINCT UPPER(PROJECT_NAME) AS PROJECT_NAME,
CONCAT('$ ',FORMAT(ROUND(((SUM(USD_PLEDGED))/1000000),2),2),' MN') AS USD_PLEDGED 
FROM crowd_funding
GROUP BY UPPER(PROJECT_NAME) 
ORDER BY SUM(USD_PLEDGED) DESC 
LIMIT 5;
 
 # MOST SUCCESSFULL PROJECTS BY NUMBER OF BACKERS
 
 SELECT DISTINCT UPPER(PROJECT_NAME) AS PROJECT_NAME,
 FORMAT(SUM(BACKERS_COUNT),0) AS BACKERS_COUNT 
 FROM crowd_funding
 GROUP BY UPPER(PROJECT_NAME) 
 ORDER BY SUM(BACKERS_COUNT) DESC 
 LIMIT 5;
 
 # PERCENTAGE OF SUCCESFULL PROJECTS OVERALL
 
SELECT CONCAT(ROUND(COUNT(*)*100/
	(SELECT COUNT(*) FROM crowd_funding),2),' %') AS SUCCESSFULL_PROJECT 
FROM crowd_funding 
WHERE STATE='SUCCESSFUL';

# PERCENTAGE OF SUCCESFULL PROJECTS BASED ON CATEGORY 

WITH CATEGORY_COUNT AS (
	SELECT CATEGORY,COUNT(*) AS CNT 
	FROM crowd_funding 
	GROUP BY CATEGORY)
SELECT CC.CATEGORY,
	CONCAT(ROUND(COUNT(*)*100/CNT,2),' %') AS SUCCESS_PERCENT 
FROM CATEGORY_COUNT AS CC 
JOIN crowd_funding AS CF 
	ON CC.CATEGORY=CF.CATEGORY 
WHERE CF.STATE='SUCCESSFUL' 
GROUP BY CATEGORY 
HAVING COUNT(PROJECTID)>1000 
ORDER BY (COUNT(*)*100/CNT) DESC 
LIMIT 10;

# PERCENTAGE OF SUCCESFULL PROJECTS BASED ON YEAR_MONTH

WITH YEAR_MONTHLY_SUCCESS AS(
	SELECT CD.YEAR_MONTHS,
		COUNT(CF.PROJECTID) AS NUMBER_OF_PROJECTS 
	FROM crowd_funding AS CF 
    JOIN calendardates AS CD 
		ON CF.LAUNCHED_AT_DATE=CD.calendar_date 
	GROUP BY CD.YEAR_MONTHS)
SELECT YS.YEAR_MONTHS,
	CONCAT(ROUND(COUNT(*)*100/NUMBER_OF_PROJECTS,2),' %') AS SUCCESS_PERCENT 
FROM YEAR_MONTHLY_SUCCESS AS YS 
JOIN calendardates AS CD 
	ON CD.YEAR_MONTHS=YS.YEAR_MONTHS 
JOIN crowd_funding AS CF
	ON CF.SUCCESSFULL_AT_DATE=CD.calendar_date 
WHERE CF.STATE='SUCCESSFUL' 
GROUP BY YS.YEAR_MONTHS,CD.YEAR,CD.MONTH 
ORDER BY YEAR ASC,MONTH ASC;

# PERCENTAGE OF SUCCESFULL PROJECTS BASED ON YEAR 

WITH YEARLY_SUCCESS AS(
	SELECT CD.YEAR,
		COUNT(CF.PROJECTID) AS NUMBER_OF_PROJECTS 
	FROM crowd_funding AS CF 
    JOIN calendardates AS CD
		ON CF.LAUNCHED_AT_DATE=CD.calendar_date 
    GROUP BY CD.YEAR)
SELECT YS.YEAR,
	CONCAT(ROUND(COUNT(*)*100/NUMBER_OF_PROJECTS,2),' %') AS SUCCESS_PERCENT 
FROM YEARLY_SUCCESS AS YS 
JOIN calendardates AS CD 
	ON CD.YEAR=YS.YEAR 
JOIN crowd_funding AS CF
	ON CF.SUCCESSFULL_AT_DATE=CD.calendar_date 
WHERE CF.STATE='SUCCESSFUL' 
GROUP BY YS.YEAR 
ORDER BY YEAR ASC;

# SPOTLIGHTED PORJECTS
WITH SPOTLIGHT AS(
	SELECT SUM(USD_PLEDGED) AS USD_PLEDGED,
			SUM(GOAL) AS GOAL_SET,
            COUNT(*) AS NUMBER_OF_PROJECTS
	FROM crowd_funding 
    WHERE SPOTLIGHT =1),
NO_SPOTLIGHT AS(
	SELECT SUM(USD_PLEDGED) AS USD_PLEDGED,
			SUM(GOAL) AS GOAL_SET,
            COUNT(*) AS NUMBER_OF_PROJECTS 
	FROM crowd_funding 
    WHERE SPOTLIGHT =0)
SELECT 'YES' AS SPOTLIGHT,
	FORMAT(NUMBER_OF_PROJECTS,0) AS NUMBER_OF_PROJECTS,
	CONCAT('$ ',FORMAT(ROUND((USD_PLEDGED/1000000),2),0),' MN') AS AMOUNT_PLEDGED,
    CONCAT('$ ',FORMAT(ROUND((GOAL_SET/1000000),2),0),' MN') AS GOAL_SET,
    CONCAT(ROUND((USD_PLEDGED*100/GOAL_SET),2),' %') AS GOAL_PER 
FROM SPOTLIGHT
UNION
SELECT 'NO',
	FORMAT(NUMBER_OF_PROJECTS,0) AS NUMBER_OF_PROJECTS,
	CONCAT('$ ',FORMAT(ROUND((USD_PLEDGED/1000000),2),0),' MN') AS AMOUNT_PLEDGED,
    CONCAT('$ ',FORMAT(ROUND((GOAL_SET/1000000),2),0),' MN') AS GOAL_SET,
    CONCAT(ROUND((USD_PLEDGED*100/GOAL_SET),2),' %') AS GOAL_PER 
FROM NO_SPOTLIGHT;

# STAFF PICK PROJECTS

WITH STAFF_PICK AS(
		SELECT SUM(USD_PLEDGED) AS USD_PLEDGED,
			SUM(GOAL) AS GOAL_SET ,
            COUNT(*) AS NUMBER_OF_PROJECTS
        FROM crowd_funding 
        WHERE STAFF_PICK =1),
NO_STAFF_PICK AS(
		SELECT SUM(USD_PLEDGED) AS USD_PLEDGED,
			SUM(GOAL) AS GOAL_SET ,
            COUNT(*) AS NUMBER_OF_PROJECTS
        FROM crowd_funding 
        WHERE STAFF_PICK =0)
SELECT 'YES' AS STAFF_PICK,
	FORMAT(NUMBER_OF_PROJECTS,0) AS NUMBER_OF_PROJECTS,
	CONCAT('$ ',FORMAT(ROUND((USD_PLEDGED/1000000),2),0),' MN') AS AMOUNT_PLEDGED,
    CONCAT('$ ',FORMAT(ROUND((GOAL_SET/1000000),2),0),' MN') AS GOAL_SET,
    CONCAT(ROUND((USD_PLEDGED*100/GOAL_SET),2),' %') AS GOAL_PER 
FROM STAFF_PICK
UNION
SELECT 'NO',
	FORMAT(NUMBER_OF_PROJECTS,0) AS NUMBER_OF_PROJECTS,
	CONCAT('$ ',FORMAT(ROUND((USD_PLEDGED/1000000),2),0),' MN') AS AMOUNT_PLEDGED,
	CONCAT('$ ',FORMAT(ROUND((GOAL_SET/1000000),2),0),' MN') AS GOAL_SET,
	CONCAT(ROUND((USD_PLEDGED*100/GOAL_SET),2),' %') AS GOAL_PER 
FROM NO_STAFF_PICK;

#######################################################################
#######################################################################
#######################################################################