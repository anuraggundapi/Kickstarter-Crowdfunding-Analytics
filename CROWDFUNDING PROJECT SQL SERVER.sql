CREATE DATABASE CROWDFUNDING;
USE CROWDFUNDING;

 --CATEGORY TABLE

CREATE TABLE CATEGORY (CATEGORY_ID INT,
						NAME NVARCHAR(MAX),
                        PARENT_ID INT,
                        POSITION INT);

BULK INSERT CATEGORY
FROM "C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/crowdfunding_Category.csv"
WITH(FORMAT='CSV',
	FIRSTROW=2,
	FIELDTERMINATOR=',',
	ROWTERMINATOR='0x0a');

SELECT * FROM CATEGORY;
EXEC sp_rename 'CATEGORY.NAME','CATEGORY','COLUMN';

 --CREATOR TABLE

CREATE TABLE CREATOR(CREATOR_ID INT,
					NAME NVARCHAR(MAX),
					CHOSEN_CURRENCY NVARCHAR(MAX));

BULK INSERT CREATOR
FROM "C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/crowdfunding_Creator.csv"
WITH (FORMAT='CSV',
	  FIRSTROW=2,
	  FIELDTERMINATOR=',',
	  ROWTERMINATOR='0x0a');

SELECT * FROM CREATOR;


UPDATE CREATOR SET CHOSEN_CURRENCY=NULL WHERE CHOSEN_CURRENCY LIKE'%.%';

 --SEGREGATING DELETED CREATORS
ALTER TABLE CREATOR 
ADD  NAMES VARCHAR(255),
  DELETED VARCHAR(100);

SELECT * FROM CREATOR WHERE NAME NOT LIKE '%DELETED%';

SELECT substring(NAME,1,CHARINDEX('(DELETED)',NAME)-1) 
FROM CREATOR WHERE NAME LIKE '%DELETED%';

UPDATE CREATOR SET NAMES=NAME WHERE NAME NOT LIKE '%DELETED%';

UPDATE CREATOR
SET DELETED = REPLACE(NAME, '(DELETED)', '')
WHERE NAME LIKE '%deleted%';


ALTER TABLE CREATOR DROP COLUMN NAME;

--LOCATION
CREATE TABLE LOCATION(ID INT,
		DISPLAYABLE_NAME NVARCHAR(MAX),
		TYPE NVARCHAR(MAX),
		NAME NVARCHAR(MAX),
		STATE NVARCHAR(MAX),
		SHORT_NAME NVARCHAR(MAX),
		IS_ROOT NVARCHAR(MAX),
		COUNTRY NVARCHAR(MAX),
		LOCALIZED_NAME NVARCHAR(MAX));

SELECT * FROM LOCATION;

ALTER TABLE LOCATION 
DROP COLUMN NAME,
 STATE,
SHORT_NAME, 
IS_ROOT,
LOCALIZED_NAME;

 --SEPERATING CITY NAME AND STATE NAME FROM DISPLAYABLE_NAME

SELECT DISPLAYABLE_NAME FROM LOCATION WHERE DISPLAYABLE_NAME NOT LIKE '%,%';

SELECT CASE WHEN CHARINDEX(',',DISPLAYABLE_NAME)>0 
	THEN SUBSTRING(DISPLAYABLE_NAME,1,CHARINDEX(',',DISPLAYABLE_NAME)-1) 
    ELSE DISPLAYABLE_NAME END FROM LOCATION;
    
ALTER TABLE LOCATION ADD CITY VARCHAR(200);

UPDATE LOCATION 
SET CITY=CASE 
	WHEN CHARINDEX(',',DISPLAYABLE_NAME)>0 
    THEN SUBSTRING(DISPLAYABLE_NAME,1,CHARINDEX(',',DISPLAYABLE_NAME)-1) 
    ELSE DISPLAYABLE_NAME END;
    
SELECT DISTINCT substring(DISPLAYABLE_NAME,CHARINDEX(',',DISPLAYABLE_NAME)+2,2) 
FROM LOCATION;

SELECT DISTINCT substring(DISPLAYABLE_NAME,CHARINDEX(',',DISPLAYABLE_NAME)+2,2) 
FROM LOCATION
WHERE substring(DISPLAYABLE_NAME,CHARINDEX(',',DISPLAYABLE_NAME)+2,2)
	=UPPER(substring(DISPLAYABLE_NAME,CHARINDEX(',',DISPLAYABLE_NAME)+2,2));
    --TO FILTER COUNTRY CODE OUT OF STATE CODE
    
ALTER TABLE LOCATION ADD  STATE VARCHAR(10);

UPDATE LOCATION 
SET STATE=substring(DISPLAYABLE_NAME,CHARINDEX(',',DISPLAYABLE_NAME)+2,2) 	
WHERE substring(DISPLAYABLE_NAME,CHARINDEX(',',DISPLAYABLE_NAME)+2,2)
	=UPPER(substring(DISPLAYABLE_NAME,CHARINDEX(',',DISPLAYABLE_NAME)+2,2));
ALTER TABLE LOCATION DROP COLUMN DISPLAYABLE_NAME;

ALTER TABLE LOCATION ADD COUNTRY_NAME VARCHAR(200);
UPDATE  L
SET L.COUNTRY_NAME=C.COUNTRY FROM
LOCATION AS L JOIN COUNTRY AS C ON L.COUNTRY=C.CODE;

ALTER TABLE LOCATION DROP COLUMN COUNTRY;



--COUNTRY CODE

CREATE TABLE COUNTRY (CODE NVARCHAR(255),COUNTRY NVARCHAR(255));

BULK INSERT COUNTRY
FROM "C:\ProgramData\MySQL\MySQL Server 8.0\Uploads\COUNTRY CODES.csv"
WITH (FORMAT='CSV',
		FIRSTROW=2,
		FIELDTERMINATOR=',',
		ROWTERMINATOR='0x0a');

SELECT * FROM COUNTRY;

--CROWDFUNDING

CREATE TABLE CROWDFUNDING(ID INT,
		STATE NVARCHAR(MAX),
		NAME NVARCHAR(MAX),
		COUNTRY NVARCHAR(MAX),
		CREATOR_ID INT,
		LOCATION_ID INT,
		CATEGORY_ID INT,
		CREATED_AT INT,
		DEADLINE INT,
		UPDATED_AT INT,
		STATE_CHANGED_AT INT,
		SUCCESSFULL_AT INT,
		LAUNCHED_AT INT,
		GOAL DECIMAL(15,2),
		PLEDGED DECIMAL(15,2),
		CURRENCY NVARCHAR(MAX),
		CURRENCY_SYMBOL NVARCHAR(MAX),
		USD_PLEDGED DECIMAL(15,2),
		STATIC_USD_RATE DECIMAL(10,2),
		BACKERS_COUNT INT,
		SPOTLIGHT NVARCHAR(MAX),
		STAFF_PICK NVARCHAR(MAX),
		BLURB NVARCHAR(MAX),
		CURRENCY_TRAILING_CODE NVARCHAR(MAX),
		DISABLE_COMMUNICATION NVARCHAR(MAX));

BULK INSERT CROWDFUNDING
FROM "C:\ProgramData\MySQL\MySQL Server 8.0\Uploads\Crowdfunding_projects_1.csv"
WITH (FORMAT='CSV',
		FIRSTROW=2,
		FIELDTERMINATOR=',',
		ROWTERMINATOR='0x0a');

SELECT TOP 50 * FROM CROWDFUNDING ORDER BY USD_PLEDGED DESC;

--ADDING DATE COLUMNS
ALTER TABLE CROWDFUNDING
ADD  CREATED_AT_DATE DATE, 
  DEADLINE_DATE DATE, 
  UPDATED_AT_DATE DATE, 
  STATE_CHANGED_AT_DATE DATE, 
  SUCCESSFULL_AT_DATE DATE, 
  LAUNCHED_AT_DATE DATE;

SELECT DATEADD(S,LAUNCHED_AT,'1970-1-1') FROM CROWDFUNDING;

--EPOCH CONVERTOR
UPDATE CROWDFUNDING
SET CREATED_AT_DATE=DATEADD(S,CREATED_AT,'1970-1-1');
UPDATE CROWDFUNDING
SET DEADLINE_DATE=DATEADD(S,DEADLINE,'1970-1-1');
UPDATE CROWDFUNDING
SET UPDATED_AT_DATE=DATEADD(S,UPDATED_AT,'1970-1-1');
UPDATE CROWDFUNDING
SET STATE_CHANGED_AT_DATE=DATEADD(S,STATE_CHANGED_AT,'1970-1-1');
UPDATE CROWDFUNDING
SET SUCCESSFULL_AT_DATE=DATEADD(S,SUCCESSFULL_AT,'1970-1-1');
UPDATE CROWDFUNDING
SET LAUNCHED_AT_DATE=DATEADD(S,LAUNCHED_AT,'1970-1-1');

--REMOVING UNNESECARY COLUMNS

ALTER TABLE CROWDFUNDING DROP COLUMN CREATED_AT,
DEADLINE, UPDATED_AT,
 STATE_CHANGED_AT,
SUCCESSFULL_AT,
LAUNCHED_AT;

 --ADDING COUNTRY NAME

ALTER TABLE CROWDFUNDING 
ADD COUNTRY_NAME NVARCHAR(MAX);

SELECT C.COUNTRY,CF.COUNTRY 
FROM CROWDFUNDING AS CF 
JOIN COUNTRY AS C 
	ON C.CODE=CF.COUNTRY;

UPDATE CF SET CF.COUNTRY_NAME=C.COUNTRY
FROM CROWDFUNDING AS CF
JOIN COUNTRY AS C ON CF.COUNTRY=C.CODE;

 --REMOVING COLUMNS NOT NEEDED
ALTER TABLE CROWDFUNDING DROP COLUMN COUNTRY; 

ALTER TABLE CROWDFUNDING DROP COLUMN BLURB,CURRENCY_TRAILING_CODE;

--STANDARDIZING SATFF_PICK,SPOTLIGHT
UPDATE CROWDFUNDING
SET SPOTLIGHT=CASE 
	WHEN SPOTLIGHT='TRUE' THEN 1
	WHEN SPOTLIGHT='FALSE' THEN 0 
	ELSE SPOTLIGHT END;
ALTER TABLE CROWDFUNDING ALTER COLUMN SPOTLIGHT INT;
--CHANGED DATA TYPE

UPDATE crowdfunding 
SET STAFF_PICK=CASE 
	WHEN STAFF_PICK='TRUE' THEN 1 
    WHEN STAFF_PICK='FALSE' THEN 0
    ELSE STAFF_PICK END;
ALTER TABLE CROWDFUNDING ALTER COLUMN STAFF_PICK INT;

--ADJUSTED USD BASED ON STATIC RATE
ALTER TABLE CROWDFUNDING ADD USD_ADJUSTED BIGINT;

UPDATE CROWDFUNDING SET USD_ADJUSTED=USD_PLEDGED*STATIC_USD_RATE;

ALTER TABLE CROWDFUNDING 
DROP COLUMN CURRENCY,
 CURRENCY_SYMBOL,
 STATIC_USD_RATE;

--MINOR ADJUSTMENTS
ALTER TABLE CROWDFUNDING ALTER COLUMN STATE VARCHAR(50);
ALTER TABLE CROWDFUNDING 
DROP COLUMN UPDATED_AT_DATE,
STATE_CHANGED_AT_DATE;
EXEC sp_rename 'CROWDFUNDING.NAME','PROJECT_NAME','COLUMN';

 --FINAL TABLE
SELECT CF.ID,
		CF.PROJECT_NAME,
        CF.STATE,
        CR.NAMES,
        CR.DELETED,
        L.TYPE,
        L.CITY,
        CF.COUNTRY_NAME,
        CT.CATEGORY,
        CF.GOAL,
        CF.USD_PLEDGED,
        CF.USD_ADJUSTED,
        CF.BACKERS_COUNT,
        CF.SPOTLIGHT,
        CF.STAFF_PICK,
        CF.CREATED_AT_DATE,
        CF.DEADLINE_DATE,
        CF.SUCCESSFULL_AT_DATE,
        CF.LAUNCHED_AT_DATE 
FROM CROWDFUNDING AS CF 
JOIN CATEGORY AS CT 
	ON CF.CATEGORY_ID=CT.CATEGORY_ID 
JOIN CREATOR AS CR 
	ON CR.CREATOR_ID=CF.CREATOR_ID
JOIN LOCATION AS L 
	ON CF.LOCATION_ID=L.ID;

SELECT 
    cf.ID AS PROJECTID,
    cf.PROJECT_NAME AS PROJECT_NAME,
    cf.STATE AS STATE,
    cr.NAMES AS NAMES,
    cr.DELETED AS DELETED,
    l.TYPE AS TYPE,
    l.CITY AS CITY,
    cf.COUNTRY_NAME AS COUNTRY_NAME,
    ct.CATEGORY AS CATEGORY,
    cf.GOAL AS GOAL,
    cf.USD_PLEDGED AS USD_PLEDGED,
    cf.USD_ADJUSTED AS USD_ADJUSTED,
    cf.BACKERS_COUNT AS BACKERS_COUNT,
    cf.SPOTLIGHT AS SPOTLIGHT,
    cf.STAFF_PICK AS STAFF_PICK,
    cf.CREATED_AT_DATE AS CREATED_AT_DATE,
    cf.DEADLINE_DATE AS DEADLINE_DATE,
    cf.SUCCESSFULL_AT_DATE AS SUCCESSFULL_AT_DATE,
    cf.LAUNCHED_AT_DATE AS LAUNCHED_AT_DATE
INTO crowd_FUNDING
FROM crowdfunding AS cf
JOIN category AS ct 
    ON cf.category_id = ct.CATEGORY_ID
JOIN creator AS cr 
    ON cr.CREATOR_ID = cf.creator_id
JOIN location AS l 
    ON cf.location_id = l.ID;


--MAKING CALENDAR TABLE 

--CALCULATING MINIMUM AND MAXIMUM DATE
SELECT MIN(CREATED_AT_DATE) FROM crowd_FUNDING
UNION    
SELECT MIN(DEADLINE_DATE) FROM crowd_FUNDING
UNION
SELECT MIN(SUCCESSFULL_AT_DATE) FROM crowd_FUNDING
UNION
SELECT MIN(LAUNCHED_AT_DATE) FROM crowd_FUNDING
UNION
SELECT MAX(CREATED_AT_DATE) FROM crowd_FUNDING
UNION    
SELECT max(DEADLINE_DATE) FROM crowd_FUNDING
UNION
SELECT max(SUCCESSFULL_AT_DATE) FROM crowd_FUNDING
UNION
SELECT MAX(LAUNCHED_AT_DATE) FROM crowd_FUNDING;

SELECT LEAST((SELECT MIN(CREATED_AT_DATE) FROM crowd_FUNDING),
        (SELECT MIN(DEADLINE_DATE) FROM crowd_FUNDING),
        (SELECT MIN(SUCCESSFULL_AT_DATE) FROM crowd_FUNDING),
        (SELECT MIN(LAUNCHED_AT_DATE) FROM crowd_FUNDING)) AS MIN_MAX
UNION ALL
SELECT GREATEST((SELECT MAX(CREATED_AT_DATE) FROM crowd_FUNDING),
        (SELECT MAX(DEADLINE_DATE) FROM crowd_FUNDING),
        (SELECT MAX(SUCCESSFULL_AT_DATE) FROM crowd_FUNDING),
        (SELECT MAX(LAUNCHED_AT_DATE) FROM crowd_FUNDING));

CREATE TABLE CalendarDates (calendar_date DATE);

SELECT * FROM calendardates ORDER BY 1 DESC;

WITH DATESERIES AS
(SELECT CAST('2009-04-21' AS DATE) AS DT
UNION ALL
SELECT DATEADD(DAY,1,DT)
FROM DATESERIES
WHERE DT<='2019-03-31')
INSERT INTO CalendarDates
SELECT DT FROM DATESERIES
OPTION (MAXRECURSION 0);

ALTER TABLE calendardates ADD  YEAR INT,
						MONTH INT,
                        MONTH_NAME VARCHAR(25),
                         QUARTER INT,
                          YEAR_MONTHS varchar(50),
                          WEEKDAY INT,
                          DAY_NAME varchar(20),
                          FINANCIAL_MONTH VARCHAR(25),
                          FINANCIAL_QUARTER VARCHAR(20);

UPDATE calendardates SET YEAR=YEAR(calendar_DATE);

UPDATE calendardates SET MONTH=MONTH(calendar_DATE);

UPDATE calendardates SET MONTH_NAME=DATENAME(MONTH,calendar_DATE);

UPDATE calendardates SET QUARTER=DATEPART(QUARTER,calendar_DATE);

UPDATE calendardates SET YEAR_MONTHS=FORMAT(calendar_DATE,'yyyy-MMM');

UPDATE calendardates SET WEEKDAY=DATEPART(WEEKDAY,calendar_DATE);

UPDATE calendardates SET DAY_NAME=DATENAME(WEEKDAY,calendar_DATE);

UPDATE calendardates SET FINANCIAL_MONTH=
	CONCAT('FM ',CASE 
			WHEN MONTH(calendar_DATE)<4 THEN MONTH(calendar_DATE)+9 
            ELSE MONTH(calendar_DATE)-3 END);

UPDATE calendardates SET FINANCIAL_QUARTER=
	CONCAT('FQ ',CASE 
			WHEN DATEPART(QUARTER,calendar_DATE)=1 THEN 4 
            ELSE DATEPART(QUARTER,calendar_DATE)-1 END);

----------------------------------------------------------

 --NUMBER OF PROJECTS BASED ON STATUS

SELECT UPPER(STATE) AS STATUS,
	FORMAT(COUNT(PROJECTID),'N0') AS NUMBER_OF_PROJECTS 
FROM crowd_funding GROUP BY STATE 
ORDER BY CASE STATE 
	WHEN 'SUCCESSFUL' THEN 1 
    WHEN 'LIVE' THEN 2 
    WHEN 'CANCELED' THEN 3 
    WHEN 'FAILED'THEN 4 
    WHEN 'SUSPENDED' THEN 5 
    WHEN 'PURGED' THEN 6 END;

 --NUMBER OF PROJECTS BASED ON LOCATION

SELECT TOP 10
	UPPER(COUNTRY_NAME) AS LOCATION,
	FORMAT(COUNT(PROJECTID),'N0') AS NUMBER_OF_PROJECTS 
FROM CROWD_FUNDING 
GROUP BY COUNTRY_NAME 
ORDER BY COUNT(PROJECTID) DESC ;

 --NUMBER OF PROJECTS BASED ON CATEGORY

SELECT TOP 10
	UPPER(CATEGORY) AS CATEGORY,
	FORMAT(COUNT(PROJECTID),'N0') AS NUMBER_OF_PROJECTS 
FROM CROWD_FUNDING 
GROUP BY CATEGORY 
ORDER BY COUNT(PROJECTID) DESC ;

 --NUMBER OF PROJECTS BASED ON YEAR_MONTH

SELECT CD.YEAR_MONTHS,
	FORMAT(COUNT(CF.PROJECTID),'N0') AS NUMBER_OF_PROJECTS 
FROM crowd_funding AS CF 
JOIN calendardates AS CD 
	ON CF.LAUNCHED_AT_DATE=CD.calendar_date 
GROUP BY CD.YEAR_MONTHS,CD.YEAR,CD.MONTH 
ORDER BY YEAR ASC,MONTH ASC;

 --NUMBER OF PROJECTS BASED ON YEAR 

SELECT CD.YEAR,
	FORMAT(COUNT(CF.PROJECTID),'N0') AS NUMBER_OF_PROJECTS 
FROM crowd_funding AS CF 
JOIN calendardates AS CD 
	ON CF.LAUNCHED_AT_DATE=CD.calendar_date
GROUP BY CD.YEAR 
ORDER BY CD.YEAR ASC;

--SUCCESSFULL PROJECT OVERVIEW

SELECT FORMAT(COUNT(*),'N0') AS NUMBER_OF_SUCCESSFULL_PROJECTS,
CONCAT(FORMAT(ROUND((SUM(USD_PLEDGED)/1000000),2),'N2'),' MN') AS AMOUNT_PLEDGED ,
CONCAT(FORMAT(ROUND((SUM(BACKERS_COUNT)/1000000),2),'N2'),' MN') AS NUMBER_OF_BACKERS,
ROUND(AVG(DATEDIFF(DAY,SUCCESSFULL_AT_DATE,LAUNCHED_AT_DATE)),2) AS AVERAGE_NUMBER_OF_DAYS 
FROM crowd_funding 
WHERE STATE='SUCCESSFUL';


SELECT 'NUMBER OF SUCCESSFULL PROJECTS' AS METRIC,
		FORMAT(COUNT(*),'N0') AS VALUE 
        FROM CROWD_FUNDING
UNION
SELECT 'AMOUNT PLEDGED',
		CONCAT('$ ',FORMAT(ROUND((SUM(USD_PLEDGED)/1000000),2),'N2'),' MN') 
        FROM CROWD_FUNDING
UNION
SELECT 'NUMBER OF BACKERS',
		CONCAT('$ ',FORMAT(ROUND((SUM(BACKERS_COUNT)/1000000),2),'N2'),' MN') 
        FROM CROWD_FUNDING
UNION
SELECT 'AVERAGE NUMBER OF DAYS',
		CONCAT(ROUND(AVG(DATEDIFF(DAY,SUCCESSFULL_AT_DATE,LAUNCHED_AT_DATE)),2),' DAYS') 
        FROM CROWD_FUNDING;

 --MOST SUCCESSFULL PROJECTS BY AMOUNT PLEDGED

SELECT TOP 5 
UPPER(PROJECT_NAME) AS PROJECT_NAME,
CONCAT('$ ',FORMAT(ROUND(((SUM(USD_PLEDGED))/1000000),2),'N2'),' MN') AS USD_PLEDGED 
FROM crowd_funding
GROUP BY UPPER(PROJECT_NAME) 
ORDER BY SUM(USD_PLEDGED) DESC ;
 
  --MOST SUCCESSFULL PROJECTS BY NUMBER OF BACKERS
 
 SELECT TOP 5
 UPPER(PROJECT_NAME) AS PROJECT_NAME,
 FORMAT(SUM(BACKERS_COUNT),'N0') AS BACKERS_COUNT 
 FROM crowd_funding
 GROUP BY UPPER(PROJECT_NAME) 
 ORDER BY SUM(BACKERS_COUNT) DESC ;
 
 --PERCENTAGE OF SUCCESFULL PROJECTS OVERALL
 
SELECT CONCAT(ROUND(COUNT(*)*100/
	(SELECT COUNT(*) FROM crowd_funding),2),' %') AS SUCCESSFULL_PROJECT 
FROM crowd_funding 
WHERE STATE='SUCCESSFUL';

 --PERCENTAGE OF SUCCESFULL PROJECTS BASED ON CATEGORY 

WITH CATEGORY_COUNT AS (
	SELECT CATEGORY,COUNT(*) AS CNT 
	FROM crowd_funding 
	GROUP BY CATEGORY),
SUCCESS AS(
	SELECT CATEGORY,COUNT(*)AS S_CNT
	FROM crowd_FUNDING 
	WHERE STATE='SUCCESSFUL'
	GROUP BY CATEGORY
	HAVING COUNT(*)>1000)
SELECT TOP 10
	CC.CATEGORY,
	CONCAT(S_CNT*100/CNT,' %') AS SUCCESS_PERCENT
FROM CATEGORY_COUNT AS CC
JOIN SUCCESS AS S
ON CC.CATEGORY=S.CATEGORY
ORDER BY (S_CNT*100/CNT) DESC ;

--PERCENTAGE OF SUCCESFULL PROJECTS BASED ON YEAR_MONTH

WITH YEAR_MONTHLY AS(
	SELECT CD.YEAR_MONTHS,CD.YEAR,CD.MONTH,
		COUNT(CF.PROJECTID) AS NUMBER_OF_PROJECTS 
	FROM crowd_funding AS CF 
    JOIN calendardates AS CD 
		ON CF.LAUNCHED_AT_DATE=CD.calendar_date 
	GROUP BY CD.YEAR_MONTHS,CD.YEAR,CD.MONTH),
YEARLY_MONTHLY_SUCCESS AS(
	SELECT CD.YEAR_MONTHS,CD.YEAR,CD.MONTH,
		COUNT(CF.PROJECTID) AS NUMBER_OF_S_PROJECTS 
	FROM crowd_funding AS CF 
    JOIN calendardates AS CD 
		ON CF.LAUNCHED_AT_DATE=CD.calendar_date 
	WHERE STATE='SUCCESSFUL'
	GROUP BY CD.YEAR_MONTHS,CD.YEAR,CD.MONTH)
SELECT YM.YEAR_MONTHS,
	CONCAT((NUMBER_OF_S_PROJECTS*100/NUMBER_OF_PROJECTS),' %') AS SUCCESS_PERCENT 
FROM YEAR_MONTHLY AS YM
JOIN YEARLY_MONTHLY_SUCCESS AS YMS 
	ON YM.YEAR_MONTHS=YMS.YEAR_MONTHS
ORDER BY YM.YEAR ASC,YM.MONTH ASC;

# PERCENTAGE OF SUCCESFULL PROJECTS BASED ON YEAR 

WITH YEARLY AS(
	SELECT CD.YEAR,
		COUNT(CF.PROJECTID) AS NUMBER_OF_PROJECTS 
	FROM crowd_funding AS CF 
    JOIN calendardates AS CD 
		ON CF.LAUNCHED_AT_DATE=CD.calendar_date 
	GROUP BY CD.YEAR),
YEARLY_SUCCESS AS(
	SELECT CD.YEAR,
		COUNT(*) AS NUMBER_OF_S_PROJECTS 
	FROM crowd_funding AS CF 
    JOIN calendardates AS CD 
		ON CF.LAUNCHED_AT_DATE=CD.calendar_date 
	WHERE STATE='SUCCESSFUL'
	GROUP BY CD.YEAR)
SELECT Y.YEAR,
	CONCAT((NUMBER_OF_S_PROJECTS*100/NUMBER_OF_PROJECTS),' %') AS SUCCESS_PERCENT 
FROM YEARLY AS Y
JOIN YEARLY_SUCCESS AS YS
	ON Y.YEAR=YS.YEAR
ORDER BY Y.YEAR ASC;

 --SPOTLIGHTED PORJECTS
WITH SPOTLIGHT AS(
	SELECT SUM(USD_PLEDGED) AS USD_PLEDGED,
			SUM(GOAL) AS GOAL_SET,
            COUNT(*) AS NUMBER_OF_PROJECTS
	FROM crowd_funding 
    WHERE SPOTLIGHT =1),
NO_SPOTLIGHT AS(
	SELECT SUM(USD_PLEDGED) AS USD_PLEDGED,
			SUM(GOAL) AS GOAL_SET,
            COUNT(*) AS NUMBER_OF_PROJECTS 
	FROM crowd_funding 
    WHERE SPOTLIGHT =0)
SELECT 'YES' AS SPOTLIGHT,
	FORMAT(NUMBER_OF_PROJECTS,'N0') AS NUMBER_OF_PROJECTS,
	CONCAT('$ ',FORMAT(ROUND((USD_PLEDGED/1000000),2),'N0'),' MN') AS AMOUNT_PLEDGED,
    CONCAT('$ ',FORMAT(ROUND((GOAL_SET/1000000),2),'N0'),' MN') AS GOAL_SET,
    CONCAT(ROUND((USD_PLEDGED*100/GOAL_SET),2),' %') AS GOAL_PER 
FROM SPOTLIGHT
UNION
SELECT 'NO',
	FORMAT(NUMBER_OF_PROJECTS,'N0') AS NUMBER_OF_PROJECTS,
	CONCAT('$ ',FORMAT(ROUND((USD_PLEDGED/1000000),2),'N0'),' MN') AS AMOUNT_PLEDGED,
    CONCAT('$ ',FORMAT(ROUND((GOAL_SET/1000000),2),'N0'),' MN') AS GOAL_SET,
    CONCAT(ROUND((USD_PLEDGED*100/GOAL_SET),2),' %') AS GOAL_PER 
FROM NO_SPOTLIGHT;

 --STAFF PICK PROJECTS

WITH STAFF_PICK AS(
		SELECT SUM(USD_PLEDGED) AS USD_PLEDGED,
			SUM(GOAL) AS GOAL_SET ,
            COUNT(*) AS NUMBER_OF_PROJECTS
        FROM crowd_funding 
        WHERE STAFF_PICK =1),
NO_STAFF_PICK AS(
		SELECT SUM(USD_PLEDGED) AS USD_PLEDGED,
			SUM(GOAL) AS GOAL_SET ,
            COUNT(*) AS NUMBER_OF_PROJECTS
        FROM crowd_funding 
        WHERE STAFF_PICK =0)
SELECT 'YES' AS STAFF_PICK,
	FORMAT(NUMBER_OF_PROJECTS,'N0') AS NUMBER_OF_PROJECTS,
	CONCAT('$ ',FORMAT(ROUND((USD_PLEDGED/1000000),2),'N0'),' MN') AS AMOUNT_PLEDGED,
    CONCAT('$ ',FORMAT(ROUND((GOAL_SET/1000000),2),'N0'),' MN') AS GOAL_SET,
    CONCAT(ROUND((USD_PLEDGED*100/GOAL_SET),2),' %') AS GOAL_PER 
FROM STAFF_PICK
UNION
SELECT 'NO',
	FORMAT(NUMBER_OF_PROJECTS,'N0') AS NUMBER_OF_PROJECTS,
	CONCAT('$ ',FORMAT(ROUND((USD_PLEDGED/1000000),2),'N0'),' MN') AS AMOUNT_PLEDGED,
	CONCAT('$ ',FORMAT(ROUND((GOAL_SET/1000000),2),'N0'),' MN') AS GOAL_SET,
	CONCAT(ROUND((USD_PLEDGED*100/GOAL_SET),2),' %') AS GOAL_PER 
FROM NO_STAFF_PICK;
